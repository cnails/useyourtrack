import { Button, Card, Carousel } from "antd"
import { useEffect, useRef, useState } from "react";
import LogoIcon from '../Icons/logo.svg?react';

const onboardingSteps = [
    {
        text: '–ó–¥–µ—Å—å –º—É–∑—ã–∫–∞–Ω—Ç—ã –ø—Ä–æ–¥–≤–∏–≥–∞—é—Ç —Ç—Ä–µ–∫–∏, –∞ —Å–ª—É—à–∞—Ç–µ–ª–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è—Ö. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è!',
    },
    {
        text: '–ù–∞–∂–∏–º–∞–π –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏ –∏ –ø–æ–ª—É—á–∞–π –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–π –æ—Ç—á–µ—Ç—ã –∏ –∫–æ–ø–∏ –º–æ–Ω–µ—Ç—ã',
    },
    {
        text: '–ó–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∏ —Ä—É–±–ª–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–æ–Ω–µ—Ç—É umt, –∑–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã umt, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –±–∞–ª–∞–Ω—Å–∞',
    },
    {
        text: '–ü—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ',
    },
];

export const Onboarding = ({needToShow}: {needToShow: boolean}) => {
    const [currentStep, setCurrentStep] = useState(0);
    const carouselRef = useRef<any>(null); // –†–µ—Ñ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª—å—é
    const [isOpen, setIsOpen] = useState(needToShow);

    useEffect(() => {
        if (isOpen) {
          document.body.style.overflow = 'hidden';
        } else {
          document.body.style.overflow = '';
        }
    
        return () => {
          document.body.style.overflow = '';
        };
      }, [isOpen]);

    const handleChange = (_, next) => {
        setCurrentStep(next);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
    const next = () => {
        if (currentStep !== (onboardingSteps.length - 1)) {
            carouselRef.current.next();
        } else {
            setIsOpen(false);
        }
    };

    if (!isOpen) {
        return null;
    }

    return (
        <div className='expandedCard onboardingExpandedCard'>
            <Card className="custom-card onboarding" style={{'--color-1': '#46FF40', '--color-2': '#12940E'}}>
                {/* <div style={{fontSize: '38px'}}>{userData?.balance_rub! >= 400 ? 'üîé' : '‚ùå'}</div>
                <div style={{color: '#fff', fontSize: '30px', fontWeight: '600', paddingTop: '10px'}}>{userData?.balance_rub! >= 400 ? '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' : '–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 400‚ÇΩ'}</div> */}
                <div style={{fontSize: '30px', fontWeight: '600', color: '#fff', lineHeight: '35px'}}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å<br />–Ω–∞ —Å–µ—Ä–≤–∏—Å</div>
                <br />
                <LogoIcon />
                <Carousel style={{overflow: 'visible'}} ref={carouselRef} arrows infinite={false} beforeChange={handleChange} prevArrow={<></>} nextArrow={<></>}>
                    {onboardingSteps.map(({text}) => {
                        return (
                            <div>
                                <div className="onboardingCarouselContentWrapper">
                                    <div className="onboardingCarouselStep">{currentStep + 1}</div>
                                    <div className="onboardingCarouselText">{text}</div>
                                </div>
                            </div>
                        );
                    })}
                </Carousel>
                <Button type="primary" htmlType="submit" className='mainButton' onClick={next} style={{marginTop: '24px'}}>
                    –î–∞–ª—å—à–µ
                </Button>
            </Card>
        </div>
    )
}